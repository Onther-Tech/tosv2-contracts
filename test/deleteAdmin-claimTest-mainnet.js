const hre = require("hardhat");
const { ethers } = hre;
const fs = require('fs');
const chai = require("chai");
const { solidity } = require("ethereum-waffle");

const { expect, assert } = chai;
chai.use(solidity);
require("chai").should();

const Web3EthAbi = require('web3-eth-abi');
// const { padLeft } = require('web3-utils');

const lockTOSPRoxyABI = require("../abis/LockTOSProxy.json").abi;
const BondDepositoryProxyABI = require("../artifacts/contracts/BondDepositoryProxy.sol/BondDepositoryProxy.json").abi;
const BondDepositoryLogicABI = require("../artifacts/contracts/BondDepository.sol/BondDepository.json").abi;
const StakingV2ProxyABI = require("../artifacts/contracts/StakingV2Proxy.sol/StakingV2Proxy.json").abi;
const TreasuryProxyABI = require("../artifacts/contracts/TreasuryProxy.sol/TreasuryProxy.json").abi;
const TOSABI = require("../abis/TOS.json").abi;
const StakingV2LogicABI = require("../artifacts/contracts/StakingV2.sol/StakingV2.json").abi;
const TreasuryLogicV1ABI = require("../artifacts/contracts/TreasuryV1_1.sol/TreasuryV1_1.json").abi;


describe("Admin Test(Mainnet)", () => {

    let contractAdminAddress = "0x15280a52E79FD4aB35F4B9Acbb376DCD72b44Fd1"
    let contractAdmin;
    let permissionsAdminAddress = "0x12A936026F072d4e97047696A9d11F97Eae47d21"
    let permissionsAdmin;

    let richTOSAddress = "0x36f917BBd70d31F0501fCe2Cd1756A977d783E44"
    let richTOS;
    let user1Address = "0xf0B595d10a92A5a9BC3fFeA7e79f5d266b6035Ea"
    let user1;
    let user2Address = "0x3bFda92Fa3bC0AB080Cac3775147B6318b1C5115"
    let user2;

    let admin1;

    let LockTOSProxyAddr = "0x69b4A202Fa4039B42ab23ADB725aA7b1e9EEBD79"
    let BondDepositoryProxyAddr = "0xbf715e63d767D8378102cdD3FFE3Ce2BF1E02c91"
    let StakingV2ProxyAddr = "0x14fb0933Ec45ecE75A431D10AFAa1DDF7BfeE44C"
    let TreasuryProxyAddr = "0xD27A68a457005f822863199Af0F817f672588ad6"
    let TreasuryProxyAddr2 = "0x11176e6e3fE72130Fd96b0b38Cf95B0f0C2C36fC"
    let TOSAddr = "0x409c4D8cd5d2924b9bc5509230d16a61289c8153"

    let LockTOSProxy;
    let BondDepositoryProxy;
    let BondDepositoryLogic;
    let StakingV2Proxy;
    let TreasuryProxy;
    let TreasuryProxy2;
    let TOS;
    let StakingV2Logic;
    let StakingV2Logic2;
    let TreasuryLogicV1;
    let libStaking;
    
    let minimumAmount = ethers.utils.parseUnits("100000", 18);
    let user1TOSstaking = ethers.utils.parseUnits("20", 18);    //20TOS staking
    let claimTOSAmount = ethers.utils.parseUnits("90000", 18);
    let relockAmount = ethers.utils.parseUnits("60", 18);

    let stakeIdcheck;
    let ltosAmount;
    let stakeinfo;
    let claimableLtos;

    let beforeEpochTime;
    let afterEpochTime;


    let uniswapInfo={
        poolfactory: "0x1F98431c8aD98523631AE4a59f267346ea31F984",
        npm: "0xC36442b4a4522E871399CD717aBDD847Ab11FE88",
        swapRouter: "0xE592427A0AEce92De3Edee1F18E0157C05861564",
        wethUsdcPool: "0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8",
        tosethPool: "0x2ad99c938471770da0cd60e08eaf29ebff67a92a",
        wtonWethPool: "0xc29271e3a68a7647fd1399298ef18feca3879f59",
        wtonTosPool: "0x1c0ce9aaa0c12f53df3b4d8d77b82d6ad343b4e4",
        tosDOCPool: "0x369bca127b8858108536b71528ab3befa1deb6fc",
        wton: "0xc4A11aaf6ea915Ed7Ac194161d2fC9384F15bff2",
        tos: "0x409c4D8cd5d2924b9bc5509230d16a61289c8153",
        weth: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        usdc: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
        doc: "0x0e498afce58de8651b983f136256fa3b8d9703bc",
        _fee: ethers.BigNumber.from("3000"),
        NonfungibleTokenPositionDescriptor: "0x91ae842A5Ffd8d12023116943e72A606179294f3"
    }

    //[팔려고 하는 tos의 목표치, 판매 끝나는 시간, 받는 token의 가격, tos token의 가격, 한번에 구매 가능한 TOS물량]
    // 이더상품.
    let bondInfoEther = {
        marketId : null,
        check: true,
        token: ethers.constants.AddressZero,
        poolAddress: uniswapInfo.tosethPool,
        fee: 0,
        market: {
        capAmountOfTos: ethers.BigNumber.from("30400000000000000000000"),
        closeTime: 1669852800,
        priceTosPerToken: ethers.BigNumber.from("3015716000000000000000"),
        purchasableTOSAmountAtOneTime: ethers.BigNumber.from("822468000000000000000")
        },
        tosValuationSimple: 0,
        tosValuationLock: 0
    }


    let stakeId = [
        3,  5,  8, 13, 14, 15, 16, 18, 20, 21,
        23, 25, 28, 30, 32, 33, 35, 36, 37, 38,
        39, 41, 43, 44, 45, 46, 48, 56, 57, 61,
        62, 63, 64, 66, 67, 68, 74, 76, 77, 79,
        81, 82, 86, 87, 88, 90, 91, 92, 94, 95,
        97, 101, 102, 103, 106, 107, 109, 113, 115, 116,
        117, 119, 120, 124, 126, 130, 131, 133, 134, 135,
        136, 138, 140, 141, 146, 147, 149, 151, 152, 154,
        156, 158, 160, 161, 162, 163, 165, 168, 172, 174,
        175, 176, 177, 180, 182, 183, 185, 186, 188, 189,
        191, 193, 194, 196, 197, 199, 200, 201, 203, 204,
        205, 213, 217, 218, 220, 222, 223, 224, 229, 230,
        231, 233, 235, 239, 242, 246, 249, 252, 256, 258,
        260, 262, 264, 265, 267, 271, 272, 274, 275, 277,
        279, 281, 283, 284, 286, 288, 289, 291, 294, 296,
        301, 302, 303, 305, 307, 308, 310, 312, 313, 316,
        318, 320, 324, 328, 329, 330, 332, 334, 336, 337,
        338, 340, 341, 343, 344, 346, 347, 349, 351, 352,
        354, 356, 358, 360, 362, 364, 365, 367, 368, 370,
        372, 374, 375, 378, 383, 384, 386, 388, 389, 391,
        393, 395, 403, 406, 407, 409, 411, 415, 417, 419,
        421, 423, 425, 427, 429, 431, 433, 435, 437, 438,
        440, 441, 443, 445, 447, 449, 451, 453, 455, 457,
        459, 461, 463, 465, 466, 467, 468, 469, 470, 471,
        473, 475, 477, 479, 482, 484, 486, 488, 490, 492,
        494, 498, 500, 502, 504, 506, 508, 510, 512, 516,
        518, 520, 522, 523, 524, 525, 527, 529, 531, 533,
        535, 537, 539, 541, 543, 545, 547, 549, 550, 552,
        554, 556, 557, 558, 559, 561, 563, 564, 565, 566,
        567, 691, 692, 693, 694, 696, 705, 729, 736, 737,
        738, 741, 744, 745, 747, 748, 753, 754, 755, 757,
        758, 759, 771, 772, 774, 775, 776, 777, 779, 780,
        782, 785
    ]

    let unstakerAddr = [
        '0xbdFc266Ea9f032c79EEf9eb2851F779ee298792b'
    ]

    let stakerAddr = [
        '0x8c595DA827F4182bC0E3917BccA8e654DF8223E1',
        '0xdfaf06fdC7aCEB1086A4Ab72E4e21cb97Ef98DC8',
        '0x1E694a44C32d31da91c78dAD0A39b0178Abe8BA2',
        '0x94566fAe2898502c46ee70970a0869F9565eAeF4',
        '0x94566fAe2898502c46ee70970a0869F9565eAeF4',
        '0x94566fAe2898502c46ee70970a0869F9565eAeF4',
        '0x94566fAe2898502c46ee70970a0869F9565eAeF4',
        '0xeEC317A52704E0D80A60Dd53D451b04f2a7378aD',
        '0x5892Fe47a8ddE5a51bA2c75c3760689C393323D9',
        '0x5892Fe47a8ddE5a51bA2c75c3760689C393323D9',
        '0x4D145A5e90736ad71cBF0081366625BD9eb170Cc',
        '0x7444707f6fA1371C3605b8467603CfF2f9A3e21a',
        '0x128eb26AC40Bc62F1d7EEc9Bcb0B2A72b5bc73Ab',
        '0x58767417F1e9F0D2287874c61d4A1ca75e7e8B10',
        '0x79658557c608Fda1CAEB9854BB90d7ECEa76243b',
        '0x79658557c608Fda1CAEB9854BB90d7ECEa76243b',
        '0x7ba6183BB6f346a670217F8Bb7D3dE90D7ff9147',
        '0x7ba6183BB6f346a670217F8Bb7D3dE90D7ff9147',
        '0x7ba6183BB6f346a670217F8Bb7D3dE90D7ff9147',
        '0x7ba6183BB6f346a670217F8Bb7D3dE90D7ff9147',
        '0x7ba6183BB6f346a670217F8Bb7D3dE90D7ff9147',
        '0xfFA8ca45BCedec73B6fDF3AfF84af448aa368F93',
        '0xbf265Ca7C7aCE01469959aAD580171AD6D43d8F3',
        '0xbf265Ca7C7aCE01469959aAD580171AD6D43d8F3',
        '0xbf265Ca7C7aCE01469959aAD580171AD6D43d8F3',
        '0xbf265Ca7C7aCE01469959aAD580171AD6D43d8F3',
        '0x233efcbcc678b2ca9Ad46dd17d016f7e81f8211B',
        '0x024E4FB5632cd32499ce60Fe5D892F202E1840C6',
        '0x024E4FB5632cd32499ce60Fe5D892F202E1840C6',
        '0x443a8E36753CCd89108f1b0Fc92F24eea7c7fDbC',
        '0xbe1737365C1bB0b7F635daaA5FFc2f489c4E0123',
        '0xbe1737365C1bB0b7F635daaA5FFc2f489c4E0123',
        '0xbe1737365C1bB0b7F635daaA5FFc2f489c4E0123',
        '0xF25a3f868aC8ffb7DC9d10efa7384F7bC8b8c1d2',
        '0xF25a3f868aC8ffb7DC9d10efa7384F7bC8b8c1d2',
        '0xF25a3f868aC8ffb7DC9d10efa7384F7bC8b8c1d2',
        '0x7F5D1970c474daC277C9A8C44214AC89cDAb9B39',
        '0xe1F24288F053eb5b85664eE21aDF2C86F371e9b1',
        '0xe1F24288F053eb5b85664eE21aDF2C86F371e9b1',
        '0xeb7CA466d361dC0a25602Cb355F93b03dD3fA0c2',
        '0x3d827286780dBc00ACE4ee416aD8a4C5dAAC972C',
        '0x3d827286780dBc00ACE4ee416aD8a4C5dAAC972C',
        '0x9C21c649869AB16dFa6C4B019E7788C0BeC7661e',
        '0x9C21c649869AB16dFa6C4B019E7788C0BeC7661e',
        '0x9C21c649869AB16dFa6C4B019E7788C0BeC7661e',
        '0xCaA33d41fb27067Ce3898907Ad6f0CAdf973162A',
        '0xCaA33d41fb27067Ce3898907Ad6f0CAdf973162A',
        '0xCaA33d41fb27067Ce3898907Ad6f0CAdf973162A',
        '0xcd55dD6A011b480699D15a7E0ea1c6A0a1C5d7F1',
        '0xcd55dD6A011b480699D15a7E0ea1c6A0a1C5d7F1',
        '0x7F9CEdeBae9bB65Fc790AD908dc724DffC664B4B',
        '0xF5b410cd0966f7f92cb83FDF462155B28f7De996',
        '0xF5b410cd0966f7f92cb83FDF462155B28f7De996',
        '0xF5b410cd0966f7f92cb83FDF462155B28f7De996',
        '0x3F6F3D9f821c34D6977fA11E44E2098088fe8435',
        '0x3F6F3D9f821c34D6977fA11E44E2098088fe8435',
        '0xD229561d163e1B1925f7d2B311b65474678D3Db4',
        '0x12F07F2515db5Bf520DAe6457911e980Cf7a633d',
        '0x6aD21e53C4C5cFCa3f4E7D5527CE7c0645DB74a9',
        '0x6aD21e53C4C5cFCa3f4E7D5527CE7c0645DB74a9',
        '0x6aD21e53C4C5cFCa3f4E7D5527CE7c0645DB74a9',
        '0x2c1fF1644c1B1E005606cB1e8063C734068c7231',
        '0x2c1fF1644c1B1E005606cB1e8063C734068c7231',
        '0x3548ca2F774b5b36c7758D191BA62f1DdfC50649',
        '0x58dBFe31CE1e639Ec9D0Da60d82CABcE637b2bA4',
        '0xCFCa26696CD12D7591f0b6CCcA83FE0C87b30584',
        '0xCFCa26696CD12D7591f0b6CCcA83FE0C87b30584',
        '0xD2defFe956C02635452C2d56bA4fD0A063186e00',
        '0xD2defFe956C02635452C2d56bA4fD0A063186e00',
        '0xD2defFe956C02635452C2d56bA4fD0A063186e00',
        '0xD2defFe956C02635452C2d56bA4fD0A063186e00',
        '0x43655562fb3802cbC323D4D4FD2D696f936A6f93',
        '0xAB4E9AcedF1D986E1B44a10f838b70291aCFe8D9',
        '0xE12EA99b2A6603EC19e3138a92d8F0101a588031',
        '0x25628571affE5E2E7C599D4Ed0412e8BD94F85fe',
        '0x25628571affE5E2E7C599D4Ed0412e8BD94F85fe',
        '0x149b1deBa845f6bC10E012450870B3ffD7EeabeA',
        '0xC83630414d2D655268d1B94f0FD1D6F4c57C95e1',
        '0xC83630414d2D655268d1B94f0FD1D6F4c57C95e1',
        '0xE0a2CE19C5361D6bBAAa83316D8Ff8b917552F1d',
        '0x083FCfCF850e793596A0855dc24Bdd3286CF9B0b',
        '0x52604fC0382E1E40e390F3aD3FEa372f70782F48',
        '0x1de90D3B5950aE00361ac917F46f51050CdeFBCA',
        '0x1de90D3B5950aE00361ac917F46f51050CdeFBCA',
        '0x1de90D3B5950aE00361ac917F46f51050CdeFBCA',
        '0x1de90D3B5950aE00361ac917F46f51050CdeFBCA',
        '0xD56De5Ce9EBc169eb222ddee716C2c36cdE3e4FB',
        '0x2dfEBd9a5C47E749B7F14b02Fc3c6cBbEA60413B',
        '0x5FE481273a4c5254ebeDD9d23F0E7D47392c7828',
        '0x6f306Fb4bC52808cfED8dcb3d42eB0BC99Fb1Ec8',
        '0x6f306Fb4bC52808cfED8dcb3d42eB0BC99Fb1Ec8',
        '0x6f306Fb4bC52808cfED8dcb3d42eB0BC99Fb1Ec8',
        '0x6f306Fb4bC52808cfED8dcb3d42eB0BC99Fb1Ec8',
        '0x30540480364387f5D0eC3E0186f015B5F00a599C',
        '0xaEB3E2b6e6731546bC5A1090f0C81F5bA3C33AAD',
        '0xaEB3E2b6e6731546bC5A1090f0C81F5bA3C33AAD',
        '0x00B15625C2E6b16D72c353159D29D78DB50922Ac',
        '0x00B15625C2E6b16D72c353159D29D78DB50922Ac',
        '0xFeF7F607C58183A068F4F3bbf93A8C3Ca31FE620',
        '0xFeF7F607C58183A068F4F3bbf93A8C3Ca31FE620',
        '0x171e4b1486b9F349dB655B6F62B733329Cd8C8dD',
        '0x558443882663379AF42EB4DBE6a06BCef3BE922B',
        '0x558443882663379AF42EB4DBE6a06BCef3BE922B',
        '0x557Ccaa102Fee1bC24997500bFc772b5474366c6',
        '0x557Ccaa102Fee1bC24997500bFc772b5474366c6',
        '0x5399016334868daD748C8eb7cd78C08926446bbC',
        '0x5399016334868daD748C8eb7cd78C08926446bbC',
        '0x5399016334868daD748C8eb7cd78C08926446bbC',
        '0x7d6A1Ad035bdC1E07fc21c3E85bb150E85ABBc9f',
        '0x7d6A1Ad035bdC1E07fc21c3E85bb150E85ABBc9f',
        '0x7d6A1Ad035bdC1E07fc21c3E85bb150E85ABBc9f',
        '0xE2Ec67E2feE2b58F2De99C73cCA7EedF3dbd6B02',
        '0x9310eF04596Ca7CAebb5b873170A7FFE977E51B1',
        '0x9310eF04596Ca7CAebb5b873170A7FFE977E51B1',
        '0xc63B1D2da716aCe9382cD0309c583f324Ae26c79',
        '0x5113fB2859098760f4407aA1Ac07302003a15330',
        '0x5113fB2859098760f4407aA1Ac07302003a15330',
        '0x5113fB2859098760f4407aA1Ac07302003a15330',
        '0xbAB67f9987e735487B9b9B0Bc0C1bA5421e850f4',
        '0x0aB79129720684Fa94c27c4A410426F11216586E',
        '0x0aB79129720684Fa94c27c4A410426F11216586E',
        '0xb8773691c1A01e7c22419B710E612d71E2032aaC',
        '0x98116aD363b151DbcD4FbE53AB74CE88944f3C66',
        '0x0A11BF55Bd79E928013b0e0483681ecb389737bd',
        '0x94E2DcF00CF7e33a4643478bb458b8123043116e',
        '0xe721F40946D37fFE2f2009E6010495f82c0D17da',
        '0xA91E9464cc258FC473d73204bfd990C8c4056381',
        '0xfE052A9F5f12e5F591b490FD5499A48E489f2CEf',
        '0x4BD2b3e38d149e2e6C7669B9fb9aA6dD61EBD912',
        '0x63E8eC7CeEF1534117eFE2BEb251336A909321Bd',
        '0xe1CEda16e01Af0cB670562892886b8945a4962bB',
        '0x704519B1887894F6e05E8DC35C4852Fd0c901a5D',
        '0xeE281B05834083205C9Ec1273224983a7F024411',
        '0xeE281B05834083205C9Ec1273224983a7F024411',
        '0x8Ae99e4e53BFE644F5FCBf70860C9476f531e54a',
        '0x8E229c2Cc4932BAd3E08ea83BaBA13B762DcCAd0',
        '0x8E229c2Cc4932BAd3E08ea83BaBA13B762DcCAd0',
        '0x0c4a118Cd6aAffA1dC3e18A86D1f3c1218a3451d',
        '0x0c4a118Cd6aAffA1dC3e18A86D1f3c1218a3451d',
        '0x290672713FDd5165B82D25e4D6D1FBCe7fe83F69',
        '0xC32D1E09b68953355BA1faD88B247399e3F77d98',
        '0x9844444E52b50F6D4b660e931ABef1551a69a0EC',
        '0xDd57Ce1fe41408f22Be2aF12c8ba752703E67070',
        '0xDd57Ce1fe41408f22Be2aF12c8ba752703E67070',
        '0x4944ce8EBB95ae63095b6EaCC142880fF5544D68',
        '0x7e2d69Ee46088371a6F3cBbBd2A7ccD6e153c71e',
        '0x7e2d69Ee46088371a6F3cBbBd2A7ccD6e153c71e',
        '0x986D9bB496AbD602ffbab9291a2621834f0f03a3',
        '0x26daEe818A1e38a46825faFB8A729a1c021Cc726',
        '0x640425b7d91943D3A625ffEA3DA4dd58426A26Cf',
        '0xA157AfdA98f995fa770362caeF060717fac5FF18',
        '0xA157AfdA98f995fa770362caeF060717fac5FF18',
        '0xA157AfdA98f995fa770362caeF060717fac5FF18',
        '0xdAb9381b813Cfd4C67ce8Ee26ca5Dc959C6D09Dd',
        '0x66169f8f3923297b153d2d47C8D9502485D49bEC',
        '0x66169f8f3923297b153d2d47C8D9502485D49bEC',
        '0xB4983DA083A5118C903910DB4f5a480B1D9f3687',
        '0x1BA815752eC63619eEa04D965dD239727E243C89',
        '0x1BA815752eC63619eEa04D965dD239727E243C89',
        '0x3c4618A60182e5eEA0d6A062B7bf528bc70329aC',
        '0x091F92b8CFF6216FF53533078A9293a5C14C44cc',
        '0x091F92b8CFF6216FF53533078A9293a5C14C44cc',
        '0xEa5Bb8E45EAbf518Cf0A57BB6CE6F5D2af0DC9C0',
        '0xAC2b194534E0a13f6FeCb7ADf51115e66E7715B1',
        '0xAC2b194534E0a13f6FeCb7ADf51115e66E7715B1',
        '0xAC2b194534E0a13f6FeCb7ADf51115e66E7715B1',
        '0xDacba77D1C856BC453c9FF57c93dd4e995d0ce62',
        '0xa78f5027F0C82A93aAd2D629c28bb9A87eF4567B',
        '0x5A8a0497243E430bc26EA77b0E0aBDbd97294371',
        '0x5A8a0497243E430bc26EA77b0E0aBDbd97294371',
        '0x5A8a0497243E430bc26EA77b0E0aBDbd97294371',
        '0x5F8107c695Edfa2ec28270A47C9091F1b317b993',
        '0x5F8107c695Edfa2ec28270A47C9091F1b317b993',
        '0x49b010B1A89F6aEe33B6eeD64e6bB83107E1A002',
        '0x49b010B1A89F6aEe33B6eeD64e6bB83107E1A002',
        '0xf08a155D02750b825E7a925274AE0A9415D73E6a',
        '0xf08a155D02750b825E7a925274AE0A9415D73E6a',
        '0x61C2D853F423589619161F8552A118AB0aC835Bb',
        '0x3c4ae04242a7f1f74a428e0d6439F070b2Cd91d2',
        '0x3c4ae04242a7f1f74a428e0d6439F070b2Cd91d2',
        '0x614fAB304A91B02A09429167f463CfAD6Edc1723',
        '0x2429a087E63a66F951E66F5024af9B1a502083Af',
        '0xC05ade501E348D84D3CaD510cbbeaD69E5f8e584',
        '0x3af58AEfF09064b15F60BB151b1f61E1e5Ba8C70',
        '0xCdA74fa0A92702205fbad79fF574338e8D4e685f',
        '0xbeD78FcF163D95F2370CEEde62B02a388d453B37',
        '0xbeD78FcF163D95F2370CEEde62B02a388d453B37',
        '0x157E1D9E20f7A35552B98F86B502137B54393Fe9',
        '0x157E1D9E20f7A35552B98F86B502137B54393Fe9',
        '0x27c2F5b20ABC4c3d462F2046D98E9Dc638cb6fEd',
        '0x826F903b978a09F4775788A1D47BA291808686e6',
        '0x484047d86a5CE1a48057412Afa655f6cade815db',
        '0x484047d86a5CE1a48057412Afa655f6cade815db',
        '0x2bDfFec84f2ff4c24d4fb645040C5028C59D7b2D',
        '0x979D90719aA206B948eE8BC14011E0282EF89bE8',
        '0x979D90719aA206B948eE8BC14011E0282EF89bE8',
        '0x6c4800bB42071757E7B8cb90dc3c95A9755cD18a',
        '0xBeA142aB82d1EDe5D0C4d14142743DB3a1cC2dAB',
        '0xBeA142aB82d1EDe5D0C4d14142743DB3a1cC2dAB',
        '0x55880D7d821589beB62042087E7421aD36B3cF39',
        '0x9bc8130233193142D8deDCbdf256cD638Be3a6ea',
        '0x14B620369c8Be3FcB5A2dBb631fE477234cd175B',
        '0xe839B2E436782EC0F52724e72B68d1C70CbC8F35',
        '0x26478D2e7Af7E1503314abeF8B6634c0fD17357c',
        '0x26478D2e7Af7E1503314abeF8B6634c0fD17357c',
        '0x91408ab1B7c81156219d6bBb2e3B2b0e5afe9314',
        '0x6DEDa6fFffF6fF8617E53f09c30A2f56f9d243f0',
        '0x231f6DD535F6338560350Dc03BBba1c504da2703',
        '0x1240eCaDb73376e463AAbBdC7D47c0658c2688E7',
        '0x91269DE058C0046a863CD976077f959F3f761574',
        '0xc3463f6404cf3c9bBb21B76691f4a144Cc1A9b8d',
        '0x3EB92FeDD0C320191e9b9572C42862bceD33B153',
        '0xa3Dc27e479bb70154c567Bbbc199eEA56eEF10Da',
        '0x6BE2D2132A2FF82DDb23f2BD9d6Ce9A73679EbA4',
        '0x4061Cc35C72A018f0D03eCD0715F597240bB8872',
        '0x60114cEC2fC2B01f744CE32e1B29CEd5652036A8',
        '0x0e27e6DE5f25F5509E3970FD2aB8d2709E2A3eca',
        '0x1007d1B2dEAD236187EE721d159205Fd8d9f9d3a',
        '0x056413121Fba97f407a5a119A0db32dDE99f0F64',
        '0x056413121Fba97f407a5a119A0db32dDE99f0F64',
        '0x1867DB10FE75d647a7Da7f2406daD2B3fD71131e',
        '0x1867DB10FE75d647a7Da7f2406daD2B3fD71131e',
        '0x2d967553988c0c751CD8a901f8E24B2E9B22e8e9',
        '0x0c957270b84196749Eb2be14cB242E8265ecAB93',
        '0xd97E2B8Bb7DA12741A02551a1ceE6460498c20b6',
        '0x475F210D15741EceB9291b5A1B5c27846f7Fd550',
        '0xd2f77C32fc25A1243B8d09c87137607e3D7DA455',
        '0x5d9DD86a306D0132F1935c35E95E730296c6D0E7',
        '0xacF1828d474e76D016cE736C98dCAeB5A5Ad1508',
        '0x9C7e7847fEB8b2d411cf610F9Cb775196c6efa20',
        '0x0CdDD9c42dD4935DA630Bb8e96DFEC0C70D61d96',
        '0x67d22155E5ba63EB9d2f4ce4D9afC7C07Da57DfA',
        '0xD82Ae3B0c9bF8B03Bd0d9C89cf950313C0CDE082',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x27AA217B5a2B320f79F2F0e4c282768CC17f919d',
        '0xc6A1d151a405e8503E8Ad3fa87cb9ED43Face8c4',
        '0x9ceB3E173D67997dFBa57025C4a016efdcAfBF17',
        '0x14b60722c6D396E8c61cC6a3c44b33F0793643d2',
        '0xA36EA6fBbE9364E6Ca01EFB9D6A3f50A0e5aFF13',
        '0x50d50aa3A3e57a84696B9A09Abc6E41cB472C099',
        '0x4DC3f3aFA6E00050701E8A379B2BE46DE6B0A4e4',
        '0x6E115062B13375d1E5B16E5Deb4b3C30051D6161',
        '0x1DDEec8B6FDe45c8cE7AaAb395C7937855a220d7',
        '0xACb98791c88DBB410D26D6b43783fA9d5C16a3A1',
        '0xaF7B8bd7Dbb12032426abEfa305319aBaF89C543',
        '0x72A91CEa1263F7997432EAFC819b7222b48fc9dB',
        '0x064C5De768F569724A2C01BB01bdF330Aab8D877',
        '0x23Fa79738Ae632fc45000Bfe8475E4912e7B0413',
        '0xd60121C6Ac71Fa0fdE631027bB5ab30d337f97e5',
        '0xadDd8896AAf1116246E04a63448D593Fee4F9D66',
        '0xCB6020e0Ffc289f61992B98439F51760220F190c',
        '0x0e7CA97e75Ad99D1803e4Af2C69b686A8B39CAba',
        '0x273acd8b613cCfcA039C2584a69E15033D475Cfe',
        '0xB9147b53DBe252563D7aAD7F121ef82917B68dE7',
        '0xb9209E770c95ddCbfE559Bc46f708EE343242f20',
        '0x021491158Eb83ea6c89247A63aDF7f2b764dcAE5',
        '0x74a9636E5f6C9639a0eDDf0CeA2cDeA24e67b999',
        '0x74a9636E5f6C9639a0eDDf0CeA2cDeA24e67b999',
        '0x6FaC733457d06C45096BBF3Cad530cF5339B6441',
        '0x6FaC733457d06C45096BBF3Cad530cF5339B6441',
        '0x590E1ad986230Be7a7eCf91618274Ae8487EDCa5',
        '0x45F4aaE090552Bb06a5d0E1f47F3553A77FB71D0',
        '0x91eFE360Fd43e350c2663f6594C18FF5A266d1cD',
        '0x6F51B5E5F6C02e7D951A2995590aBEA879fffe1D',
        '0x09AFCe6994bDC783958B8595f4D4DEED13956c55',
        '0x9bB9d080Ce275d174e25C0b4795892DA59975637',
        '0x744a6122789350d115207A539414c5da1b81988f',
        '0x85175c6B79E382c0E369f20cB58d9b9b607Da509',
        '0x0db99Be6D29b8d8FcF39c19072f057F418C6C037',
        '0xDe3017B477D306Be1b5C5D08B5694974092138FB',
        '0x4ff606CFD35eea724A8ecf854A890a1C30144bF2',
        '0xd51e5E72DbA89FdD03B19E576AC96af87299e7f7',
        '0xd51e5E72DbA89FdD03B19E576AC96af87299e7f7',
        '0x889256940E483813561Ff5E4ec260D65cC7BACE0',
        '0x3C2cA0f54C29e207F34C332E8153F456b2EbCC72',
        '0x89a09fd555A1c1ae34Ff4b38fA572F8015DEd181',
        '0xcb002fC8Cb3a5638F19156B16F98e9eC9232c1ae',
        '0xcb002fC8Cb3a5638F19156B16F98e9eC9232c1ae',
        '0xcb002fC8Cb3a5638F19156B16F98e9eC9232c1ae',
        '0x9bEcF278BFd8B38A12b81bb908Fe03F911c8d76c',
        '0xbdFc266Ea9f032c79EEf9eb2851F779ee298792b',
        '0x9bEcF278BFd8B38A12b81bb908Fe03F911c8d76c',
        '0xbdFc266Ea9f032c79EEf9eb2851F779ee298792b',
        '0x9bEcF278BFd8B38A12b81bb908Fe03F911c8d76c',
        '0xbdFc266Ea9f032c79EEf9eb2851F779ee298792b',
        '0x4694358477e63C46A31A50cAf518Fc4DA4fa8481',
        '0x9C21c649869AB16dFa6C4B019E7788C0BeC7661e',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x98116aD363b151DbcD4FbE53AB74CE88944f3C66',
        '0x4883ED05c66c95B9C3626903012B6746931B7418',
        '0x3d827286780dBc00ACE4ee416aD8a4C5dAAC972C',
        '0x8c595DA827F4182bC0E3917BccA8e654DF8223E1',
        '0xE59d88eb24dF45e7Ef72B2af0e40714FA3277733',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x4694358477e63C46A31A50cAf518Fc4DA4fa8481',
        '0x4694358477e63C46A31A50cAf518Fc4DA4fa8481',
        '0xd213118151117445F8C4c8447FA533213F2F80E8',
        '0xd213118151117445F8C4c8447FA533213F2F80E8',
        '0x4694358477e63C46A31A50cAf518Fc4DA4fa8481',
        '0x4694358477e63C46A31A50cAf518Fc4DA4fa8481',
        '0x942d6ac7A6702Bb1852676f3f22AeE38bD442E4C',
        '0x9bEcF278BFd8B38A12b81bb908Fe03F911c8d76c',
        '0x4883ED05c66c95B9C3626903012B6746931B7418',
        '0xc3463f6404cf3c9bBb21B76691f4a144Cc1A9b8d',
        '0xbf265Ca7C7aCE01469959aAD580171AD6D43d8F3',
        '0x889256940E483813561Ff5E4ec260D65cC7BACE0',
        '0x9C21c649869AB16dFa6C4B019E7788C0BeC7661e',
        '0x96C04d7Fe2981ee19c0a2E74b52247b726572310',
        '0x89a09fd555A1c1ae34Ff4b38fA572F8015DEd181',
        '0x3C2cA0f54C29e207F34C332E8153F456b2EbCC72',
        '0x3bFda92Fa3bC0AB080Cac3775147B6318b1C5115',
        '0x3bFda92Fa3bC0AB080Cac3775147B6318b1C5115',
        '0x340C44089bc45F86060922d2d89eFee9e0CDF5c7',
        '0x208F335aB2D6F0D23a7dF58BF05ac6380CB57E1C',
        '0xDABd0Cd9C9573C59f5AA0AEEF551475FF5a39Fa2',
        '0x78e685B073742113E9d049a0a0FC78d5AB32e896'
    ]

    let totalAddr = [
        '0x8c595DA827F4182bC0E3917BccA8e654DF8223E1',
        '0xdfaf06fdC7aCEB1086A4Ab72E4e21cb97Ef98DC8',
        '0x1E694a44C32d31da91c78dAD0A39b0178Abe8BA2',
        '0x94566fAe2898502c46ee70970a0869F9565eAeF4',
        '0x94566fAe2898502c46ee70970a0869F9565eAeF4',
        '0x94566fAe2898502c46ee70970a0869F9565eAeF4',
        '0x94566fAe2898502c46ee70970a0869F9565eAeF4',
        '0xeEC317A52704E0D80A60Dd53D451b04f2a7378aD',
        '0x5892Fe47a8ddE5a51bA2c75c3760689C393323D9',
        '0x5892Fe47a8ddE5a51bA2c75c3760689C393323D9',
        '0x4D145A5e90736ad71cBF0081366625BD9eb170Cc',
        '0x7444707f6fA1371C3605b8467603CfF2f9A3e21a',
        '0x128eb26AC40Bc62F1d7EEc9Bcb0B2A72b5bc73Ab',
        '0x58767417F1e9F0D2287874c61d4A1ca75e7e8B10',
        '0x79658557c608Fda1CAEB9854BB90d7ECEa76243b',
        '0x79658557c608Fda1CAEB9854BB90d7ECEa76243b',
        '0x7ba6183BB6f346a670217F8Bb7D3dE90D7ff9147',
        '0x7ba6183BB6f346a670217F8Bb7D3dE90D7ff9147',
        '0x7ba6183BB6f346a670217F8Bb7D3dE90D7ff9147',
        '0x7ba6183BB6f346a670217F8Bb7D3dE90D7ff9147',
        '0x7ba6183BB6f346a670217F8Bb7D3dE90D7ff9147',
        '0xfFA8ca45BCedec73B6fDF3AfF84af448aa368F93',
        '0xbf265Ca7C7aCE01469959aAD580171AD6D43d8F3',
        '0xbf265Ca7C7aCE01469959aAD580171AD6D43d8F3',
        '0xbf265Ca7C7aCE01469959aAD580171AD6D43d8F3',
        '0xbf265Ca7C7aCE01469959aAD580171AD6D43d8F3',
        '0x233efcbcc678b2ca9Ad46dd17d016f7e81f8211B',
        '0x024E4FB5632cd32499ce60Fe5D892F202E1840C6',
        '0x024E4FB5632cd32499ce60Fe5D892F202E1840C6',
        '0x443a8E36753CCd89108f1b0Fc92F24eea7c7fDbC',
        '0xbe1737365C1bB0b7F635daaA5FFc2f489c4E0123',
        '0xbe1737365C1bB0b7F635daaA5FFc2f489c4E0123',
        '0xbe1737365C1bB0b7F635daaA5FFc2f489c4E0123',
        '0xF25a3f868aC8ffb7DC9d10efa7384F7bC8b8c1d2',
        '0xF25a3f868aC8ffb7DC9d10efa7384F7bC8b8c1d2',
        '0xF25a3f868aC8ffb7DC9d10efa7384F7bC8b8c1d2',
        '0x7F5D1970c474daC277C9A8C44214AC89cDAb9B39',
        '0xe1F24288F053eb5b85664eE21aDF2C86F371e9b1',
        '0xe1F24288F053eb5b85664eE21aDF2C86F371e9b1',
        '0xeb7CA466d361dC0a25602Cb355F93b03dD3fA0c2',
        '0x3d827286780dBc00ACE4ee416aD8a4C5dAAC972C',
        '0x3d827286780dBc00ACE4ee416aD8a4C5dAAC972C',
        '0x9C21c649869AB16dFa6C4B019E7788C0BeC7661e',
        '0x9C21c649869AB16dFa6C4B019E7788C0BeC7661e',
        '0x9C21c649869AB16dFa6C4B019E7788C0BeC7661e',
        '0xCaA33d41fb27067Ce3898907Ad6f0CAdf973162A',
        '0xCaA33d41fb27067Ce3898907Ad6f0CAdf973162A',
        '0xCaA33d41fb27067Ce3898907Ad6f0CAdf973162A',
        '0xcd55dD6A011b480699D15a7E0ea1c6A0a1C5d7F1',
        '0xcd55dD6A011b480699D15a7E0ea1c6A0a1C5d7F1',
        '0x7F9CEdeBae9bB65Fc790AD908dc724DffC664B4B',
        '0xF5b410cd0966f7f92cb83FDF462155B28f7De996',
        '0xF5b410cd0966f7f92cb83FDF462155B28f7De996',
        '0xF5b410cd0966f7f92cb83FDF462155B28f7De996',
        '0x3F6F3D9f821c34D6977fA11E44E2098088fe8435',
        '0x3F6F3D9f821c34D6977fA11E44E2098088fe8435',
        '0xD229561d163e1B1925f7d2B311b65474678D3Db4',
        '0x12F07F2515db5Bf520DAe6457911e980Cf7a633d',
        '0x6aD21e53C4C5cFCa3f4E7D5527CE7c0645DB74a9',
        '0x6aD21e53C4C5cFCa3f4E7D5527CE7c0645DB74a9',
        '0x6aD21e53C4C5cFCa3f4E7D5527CE7c0645DB74a9',
        '0x2c1fF1644c1B1E005606cB1e8063C734068c7231',
        '0x2c1fF1644c1B1E005606cB1e8063C734068c7231',
        '0x3548ca2F774b5b36c7758D191BA62f1DdfC50649',
        '0x58dBFe31CE1e639Ec9D0Da60d82CABcE637b2bA4',
        '0xCFCa26696CD12D7591f0b6CCcA83FE0C87b30584',
        '0xCFCa26696CD12D7591f0b6CCcA83FE0C87b30584',
        '0xD2defFe956C02635452C2d56bA4fD0A063186e00',
        '0xD2defFe956C02635452C2d56bA4fD0A063186e00',
        '0xD2defFe956C02635452C2d56bA4fD0A063186e00',
        '0xD2defFe956C02635452C2d56bA4fD0A063186e00',
        '0x43655562fb3802cbC323D4D4FD2D696f936A6f93',
        '0xAB4E9AcedF1D986E1B44a10f838b70291aCFe8D9',
        '0xE12EA99b2A6603EC19e3138a92d8F0101a588031',
        '0x25628571affE5E2E7C599D4Ed0412e8BD94F85fe',
        '0x25628571affE5E2E7C599D4Ed0412e8BD94F85fe',
        '0x149b1deBa845f6bC10E012450870B3ffD7EeabeA',
        '0xC83630414d2D655268d1B94f0FD1D6F4c57C95e1',
        '0xC83630414d2D655268d1B94f0FD1D6F4c57C95e1',
        '0xE0a2CE19C5361D6bBAAa83316D8Ff8b917552F1d',
        '0x083FCfCF850e793596A0855dc24Bdd3286CF9B0b',
        '0x52604fC0382E1E40e390F3aD3FEa372f70782F48',
        '0x1de90D3B5950aE00361ac917F46f51050CdeFBCA',
        '0x1de90D3B5950aE00361ac917F46f51050CdeFBCA',
        '0x1de90D3B5950aE00361ac917F46f51050CdeFBCA',
        '0x1de90D3B5950aE00361ac917F46f51050CdeFBCA',
        '0xD56De5Ce9EBc169eb222ddee716C2c36cdE3e4FB',
        '0x2dfEBd9a5C47E749B7F14b02Fc3c6cBbEA60413B',
        '0x5FE481273a4c5254ebeDD9d23F0E7D47392c7828',
        '0x6f306Fb4bC52808cfED8dcb3d42eB0BC99Fb1Ec8',
        '0x6f306Fb4bC52808cfED8dcb3d42eB0BC99Fb1Ec8',
        '0x6f306Fb4bC52808cfED8dcb3d42eB0BC99Fb1Ec8',
        '0x6f306Fb4bC52808cfED8dcb3d42eB0BC99Fb1Ec8',
        '0x30540480364387f5D0eC3E0186f015B5F00a599C',
        '0xaEB3E2b6e6731546bC5A1090f0C81F5bA3C33AAD',
        '0xaEB3E2b6e6731546bC5A1090f0C81F5bA3C33AAD',
        '0x00B15625C2E6b16D72c353159D29D78DB50922Ac',
        '0x00B15625C2E6b16D72c353159D29D78DB50922Ac',
        '0xFeF7F607C58183A068F4F3bbf93A8C3Ca31FE620',
        '0xFeF7F607C58183A068F4F3bbf93A8C3Ca31FE620',
        '0x171e4b1486b9F349dB655B6F62B733329Cd8C8dD',
        '0x558443882663379AF42EB4DBE6a06BCef3BE922B',
        '0x558443882663379AF42EB4DBE6a06BCef3BE922B',
        '0x557Ccaa102Fee1bC24997500bFc772b5474366c6',
        '0x557Ccaa102Fee1bC24997500bFc772b5474366c6',
        '0x5399016334868daD748C8eb7cd78C08926446bbC',
        '0x5399016334868daD748C8eb7cd78C08926446bbC',
        '0x5399016334868daD748C8eb7cd78C08926446bbC',
        '0x7d6A1Ad035bdC1E07fc21c3E85bb150E85ABBc9f',
        '0x7d6A1Ad035bdC1E07fc21c3E85bb150E85ABBc9f',
        '0x7d6A1Ad035bdC1E07fc21c3E85bb150E85ABBc9f',
        '0xE2Ec67E2feE2b58F2De99C73cCA7EedF3dbd6B02',
        '0x9310eF04596Ca7CAebb5b873170A7FFE977E51B1',
        '0x9310eF04596Ca7CAebb5b873170A7FFE977E51B1',
        '0xc63B1D2da716aCe9382cD0309c583f324Ae26c79',
        '0x5113fB2859098760f4407aA1Ac07302003a15330',
        '0x5113fB2859098760f4407aA1Ac07302003a15330',
        '0x5113fB2859098760f4407aA1Ac07302003a15330',
        '0xbAB67f9987e735487B9b9B0Bc0C1bA5421e850f4',
        '0x0aB79129720684Fa94c27c4A410426F11216586E',
        '0x0aB79129720684Fa94c27c4A410426F11216586E',
        '0xb8773691c1A01e7c22419B710E612d71E2032aaC',
        '0x98116aD363b151DbcD4FbE53AB74CE88944f3C66',
        '0x0A11BF55Bd79E928013b0e0483681ecb389737bd',
        '0x94E2DcF00CF7e33a4643478bb458b8123043116e',
        '0xe721F40946D37fFE2f2009E6010495f82c0D17da',
        '0xA91E9464cc258FC473d73204bfd990C8c4056381',
        '0xfE052A9F5f12e5F591b490FD5499A48E489f2CEf',
        '0x4BD2b3e38d149e2e6C7669B9fb9aA6dD61EBD912',
        '0x63E8eC7CeEF1534117eFE2BEb251336A909321Bd',
        '0xe1CEda16e01Af0cB670562892886b8945a4962bB',
        '0x704519B1887894F6e05E8DC35C4852Fd0c901a5D',
        '0xeE281B05834083205C9Ec1273224983a7F024411',
        '0xeE281B05834083205C9Ec1273224983a7F024411',
        '0x8Ae99e4e53BFE644F5FCBf70860C9476f531e54a',
        '0x8E229c2Cc4932BAd3E08ea83BaBA13B762DcCAd0',
        '0x8E229c2Cc4932BAd3E08ea83BaBA13B762DcCAd0',
        '0x0c4a118Cd6aAffA1dC3e18A86D1f3c1218a3451d',
        '0x0c4a118Cd6aAffA1dC3e18A86D1f3c1218a3451d',
        '0x290672713FDd5165B82D25e4D6D1FBCe7fe83F69',
        '0xC32D1E09b68953355BA1faD88B247399e3F77d98',
        '0x9844444E52b50F6D4b660e931ABef1551a69a0EC',
        '0xDd57Ce1fe41408f22Be2aF12c8ba752703E67070',
        '0xDd57Ce1fe41408f22Be2aF12c8ba752703E67070',
        '0x4944ce8EBB95ae63095b6EaCC142880fF5544D68',
        '0x7e2d69Ee46088371a6F3cBbBd2A7ccD6e153c71e',
        '0x7e2d69Ee46088371a6F3cBbBd2A7ccD6e153c71e',
        '0x986D9bB496AbD602ffbab9291a2621834f0f03a3',
        '0x26daEe818A1e38a46825faFB8A729a1c021Cc726',
        '0x640425b7d91943D3A625ffEA3DA4dd58426A26Cf',
        '0xA157AfdA98f995fa770362caeF060717fac5FF18',
        '0xA157AfdA98f995fa770362caeF060717fac5FF18',
        '0xA157AfdA98f995fa770362caeF060717fac5FF18',
        '0xdAb9381b813Cfd4C67ce8Ee26ca5Dc959C6D09Dd',
        '0x66169f8f3923297b153d2d47C8D9502485D49bEC',
        '0x66169f8f3923297b153d2d47C8D9502485D49bEC',
        '0xB4983DA083A5118C903910DB4f5a480B1D9f3687',
        '0x1BA815752eC63619eEa04D965dD239727E243C89',
        '0x1BA815752eC63619eEa04D965dD239727E243C89',
        '0x3c4618A60182e5eEA0d6A062B7bf528bc70329aC',
        '0x091F92b8CFF6216FF53533078A9293a5C14C44cc',
        '0x091F92b8CFF6216FF53533078A9293a5C14C44cc',
        '0xEa5Bb8E45EAbf518Cf0A57BB6CE6F5D2af0DC9C0',
        '0xAC2b194534E0a13f6FeCb7ADf51115e66E7715B1',
        '0xAC2b194534E0a13f6FeCb7ADf51115e66E7715B1',
        '0xAC2b194534E0a13f6FeCb7ADf51115e66E7715B1',
        '0xDacba77D1C856BC453c9FF57c93dd4e995d0ce62',
        '0xa78f5027F0C82A93aAd2D629c28bb9A87eF4567B',
        '0x5A8a0497243E430bc26EA77b0E0aBDbd97294371',
        '0x5A8a0497243E430bc26EA77b0E0aBDbd97294371',
        '0x5A8a0497243E430bc26EA77b0E0aBDbd97294371',
        '0x5F8107c695Edfa2ec28270A47C9091F1b317b993',
        '0x5F8107c695Edfa2ec28270A47C9091F1b317b993',
        '0x49b010B1A89F6aEe33B6eeD64e6bB83107E1A002',
        '0x49b010B1A89F6aEe33B6eeD64e6bB83107E1A002',
        '0xf08a155D02750b825E7a925274AE0A9415D73E6a',
        '0xf08a155D02750b825E7a925274AE0A9415D73E6a',
        '0x61C2D853F423589619161F8552A118AB0aC835Bb',
        '0x3c4ae04242a7f1f74a428e0d6439F070b2Cd91d2',
        '0x3c4ae04242a7f1f74a428e0d6439F070b2Cd91d2',
        '0x614fAB304A91B02A09429167f463CfAD6Edc1723',
        '0x2429a087E63a66F951E66F5024af9B1a502083Af',
        '0xC05ade501E348D84D3CaD510cbbeaD69E5f8e584',
        '0x3af58AEfF09064b15F60BB151b1f61E1e5Ba8C70',
        '0xCdA74fa0A92702205fbad79fF574338e8D4e685f',
        '0xbeD78FcF163D95F2370CEEde62B02a388d453B37',
        '0xbeD78FcF163D95F2370CEEde62B02a388d453B37',
        '0x157E1D9E20f7A35552B98F86B502137B54393Fe9',
        '0x157E1D9E20f7A35552B98F86B502137B54393Fe9',
        '0x27c2F5b20ABC4c3d462F2046D98E9Dc638cb6fEd',
        '0x826F903b978a09F4775788A1D47BA291808686e6',
        '0x484047d86a5CE1a48057412Afa655f6cade815db',
        '0x484047d86a5CE1a48057412Afa655f6cade815db',
        '0x2bDfFec84f2ff4c24d4fb645040C5028C59D7b2D',
        '0x979D90719aA206B948eE8BC14011E0282EF89bE8',
        '0x979D90719aA206B948eE8BC14011E0282EF89bE8',
        '0x6c4800bB42071757E7B8cb90dc3c95A9755cD18a',
        '0xBeA142aB82d1EDe5D0C4d14142743DB3a1cC2dAB',
        '0xBeA142aB82d1EDe5D0C4d14142743DB3a1cC2dAB',
        '0x55880D7d821589beB62042087E7421aD36B3cF39',
        '0x9bc8130233193142D8deDCbdf256cD638Be3a6ea',
        '0x14B620369c8Be3FcB5A2dBb631fE477234cd175B',
        '0xe839B2E436782EC0F52724e72B68d1C70CbC8F35',
        '0x26478D2e7Af7E1503314abeF8B6634c0fD17357c',
        '0x26478D2e7Af7E1503314abeF8B6634c0fD17357c',
        '0x91408ab1B7c81156219d6bBb2e3B2b0e5afe9314',
        '0x6DEDa6fFffF6fF8617E53f09c30A2f56f9d243f0',
        '0x231f6DD535F6338560350Dc03BBba1c504da2703',
        '0x1240eCaDb73376e463AAbBdC7D47c0658c2688E7',
        '0x91269DE058C0046a863CD976077f959F3f761574',
        '0xc3463f6404cf3c9bBb21B76691f4a144Cc1A9b8d',
        '0x3EB92FeDD0C320191e9b9572C42862bceD33B153',
        '0xa3Dc27e479bb70154c567Bbbc199eEA56eEF10Da',
        '0x6BE2D2132A2FF82DDb23f2BD9d6Ce9A73679EbA4',
        '0x4061Cc35C72A018f0D03eCD0715F597240bB8872',
        '0x60114cEC2fC2B01f744CE32e1B29CEd5652036A8',
        '0x0e27e6DE5f25F5509E3970FD2aB8d2709E2A3eca',
        '0x1007d1B2dEAD236187EE721d159205Fd8d9f9d3a',
        '0x056413121Fba97f407a5a119A0db32dDE99f0F64',
        '0x056413121Fba97f407a5a119A0db32dDE99f0F64',
        '0x1867DB10FE75d647a7Da7f2406daD2B3fD71131e',
        '0x1867DB10FE75d647a7Da7f2406daD2B3fD71131e',
        '0x2d967553988c0c751CD8a901f8E24B2E9B22e8e9',
        '0x0c957270b84196749Eb2be14cB242E8265ecAB93',
        '0xd97E2B8Bb7DA12741A02551a1ceE6460498c20b6',
        '0x475F210D15741EceB9291b5A1B5c27846f7Fd550',
        '0xd2f77C32fc25A1243B8d09c87137607e3D7DA455',
        '0x5d9DD86a306D0132F1935c35E95E730296c6D0E7',
        '0xacF1828d474e76D016cE736C98dCAeB5A5Ad1508',
        '0x9C7e7847fEB8b2d411cf610F9Cb775196c6efa20',
        '0x0CdDD9c42dD4935DA630Bb8e96DFEC0C70D61d96',
        '0x67d22155E5ba63EB9d2f4ce4D9afC7C07Da57DfA',
        '0xD82Ae3B0c9bF8B03Bd0d9C89cf950313C0CDE082',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x27AA217B5a2B320f79F2F0e4c282768CC17f919d',
        '0xc6A1d151a405e8503E8Ad3fa87cb9ED43Face8c4',
        '0x9ceB3E173D67997dFBa57025C4a016efdcAfBF17',
        '0x14b60722c6D396E8c61cC6a3c44b33F0793643d2',
        '0xA36EA6fBbE9364E6Ca01EFB9D6A3f50A0e5aFF13',
        '0x50d50aa3A3e57a84696B9A09Abc6E41cB472C099',
        '0x4DC3f3aFA6E00050701E8A379B2BE46DE6B0A4e4',
        '0x6E115062B13375d1E5B16E5Deb4b3C30051D6161',
        '0x1DDEec8B6FDe45c8cE7AaAb395C7937855a220d7',
        '0xACb98791c88DBB410D26D6b43783fA9d5C16a3A1',
        '0xaF7B8bd7Dbb12032426abEfa305319aBaF89C543',
        '0x72A91CEa1263F7997432EAFC819b7222b48fc9dB',
        '0x064C5De768F569724A2C01BB01bdF330Aab8D877',
        '0x23Fa79738Ae632fc45000Bfe8475E4912e7B0413',
        '0xd60121C6Ac71Fa0fdE631027bB5ab30d337f97e5',
        '0xadDd8896AAf1116246E04a63448D593Fee4F9D66',
        '0xCB6020e0Ffc289f61992B98439F51760220F190c',
        '0x0e7CA97e75Ad99D1803e4Af2C69b686A8B39CAba',
        '0x273acd8b613cCfcA039C2584a69E15033D475Cfe',
        '0xB9147b53DBe252563D7aAD7F121ef82917B68dE7',
        '0xb9209E770c95ddCbfE559Bc46f708EE343242f20',
        '0x021491158Eb83ea6c89247A63aDF7f2b764dcAE5',
        '0x74a9636E5f6C9639a0eDDf0CeA2cDeA24e67b999',
        '0x74a9636E5f6C9639a0eDDf0CeA2cDeA24e67b999',
        '0x6FaC733457d06C45096BBF3Cad530cF5339B6441',
        '0x6FaC733457d06C45096BBF3Cad530cF5339B6441',
        '0x590E1ad986230Be7a7eCf91618274Ae8487EDCa5',
        '0x45F4aaE090552Bb06a5d0E1f47F3553A77FB71D0',
        '0x91eFE360Fd43e350c2663f6594C18FF5A266d1cD',
        '0x6F51B5E5F6C02e7D951A2995590aBEA879fffe1D',
        '0x09AFCe6994bDC783958B8595f4D4DEED13956c55',
        '0x9bB9d080Ce275d174e25C0b4795892DA59975637',
        '0x744a6122789350d115207A539414c5da1b81988f',
        '0x85175c6B79E382c0E369f20cB58d9b9b607Da509',
        '0x0db99Be6D29b8d8FcF39c19072f057F418C6C037',
        '0xDe3017B477D306Be1b5C5D08B5694974092138FB',
        '0x4ff606CFD35eea724A8ecf854A890a1C30144bF2',
        '0xd51e5E72DbA89FdD03B19E576AC96af87299e7f7',
        '0xd51e5E72DbA89FdD03B19E576AC96af87299e7f7',
        '0x889256940E483813561Ff5E4ec260D65cC7BACE0',
        '0x3C2cA0f54C29e207F34C332E8153F456b2EbCC72',
        '0x89a09fd555A1c1ae34Ff4b38fA572F8015DEd181',
        '0xcb002fC8Cb3a5638F19156B16F98e9eC9232c1ae',
        '0xcb002fC8Cb3a5638F19156B16F98e9eC9232c1ae',
        '0xcb002fC8Cb3a5638F19156B16F98e9eC9232c1ae',
        '0x9bEcF278BFd8B38A12b81bb908Fe03F911c8d76c',
        '0xbdFc266Ea9f032c79EEf9eb2851F779ee298792b',
        '0x9bEcF278BFd8B38A12b81bb908Fe03F911c8d76c',
        '0xbdFc266Ea9f032c79EEf9eb2851F779ee298792b',
        '0x9bEcF278BFd8B38A12b81bb908Fe03F911c8d76c',
        '0xbdFc266Ea9f032c79EEf9eb2851F779ee298792b',
        '0x4694358477e63C46A31A50cAf518Fc4DA4fa8481',
        '0x9C21c649869AB16dFa6C4B019E7788C0BeC7661e',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x98116aD363b151DbcD4FbE53AB74CE88944f3C66',
        '0x4883ED05c66c95B9C3626903012B6746931B7418',
        '0x3d827286780dBc00ACE4ee416aD8a4C5dAAC972C',
        '0x8c595DA827F4182bC0E3917BccA8e654DF8223E1',
        '0xE59d88eb24dF45e7Ef72B2af0e40714FA3277733',
        '0x54d4FD78e1124CBc0e832540c52609ED8018eEC1',
        '0x4694358477e63C46A31A50cAf518Fc4DA4fa8481',
        '0x4694358477e63C46A31A50cAf518Fc4DA4fa8481',
        '0xd213118151117445F8C4c8447FA533213F2F80E8',
        '0xd213118151117445F8C4c8447FA533213F2F80E8',
        '0x4694358477e63C46A31A50cAf518Fc4DA4fa8481',
        '0x4694358477e63C46A31A50cAf518Fc4DA4fa8481',
        '0x942d6ac7A6702Bb1852676f3f22AeE38bD442E4C',
        '0x9bEcF278BFd8B38A12b81bb908Fe03F911c8d76c',
        '0x4883ED05c66c95B9C3626903012B6746931B7418',
        '0xc3463f6404cf3c9bBb21B76691f4a144Cc1A9b8d',
        '0xbf265Ca7C7aCE01469959aAD580171AD6D43d8F3',
        '0x889256940E483813561Ff5E4ec260D65cC7BACE0',
        '0x9C21c649869AB16dFa6C4B019E7788C0BeC7661e',
        '0x96C04d7Fe2981ee19c0a2E74b52247b726572310',
        '0x89a09fd555A1c1ae34Ff4b38fA572F8015DEd181',
        '0x3C2cA0f54C29e207F34C332E8153F456b2EbCC72',
        '0x3bFda92Fa3bC0AB080Cac3775147B6318b1C5115',
        '0x3bFda92Fa3bC0AB080Cac3775147B6318b1C5115',
        '0x340C44089bc45F86060922d2d89eFee9e0CDF5c7',
        '0x208F335aB2D6F0D23a7dF58BF05ac6380CB57E1C',
        '0xDABd0Cd9C9573C59f5AA0AEEF551475FF5a39Fa2',
        '0x78e685B073742113E9d049a0a0FC78d5AB32e896',
        '0xbdFc266Ea9f032c79EEf9eb2851F779ee298792b'
    ]

    let set = new Set(totalAddr)

    let uniqueAddr = [...set];

    before('account setting', async () => {
        // accounts = await ethers.getSigners();
        // [admin1] = accounts;
        // console.log('admin1',admin1.address);


        await hre.network.provider.send("hardhat_impersonateAccount", [
            contractAdminAddress,
        ]);
        contractAdmin = await hre.ethers.getSigner(contractAdminAddress);

        await hre.network.provider.send("hardhat_impersonateAccount", [
            permissionsAdminAddress,
        ]);
        permissionsAdmin = await hre.ethers.getSigner(permissionsAdminAddress);

        await hre.network.provider.send("hardhat_impersonateAccount", [
            richTOSAddress,
        ]);
        richTOS = await hre.ethers.getSigner(richTOSAddress);

        await hre.network.provider.send("hardhat_impersonateAccount", [
            user1Address,
        ]);
        user1 = await hre.ethers.getSigner(user1Address);

        await hre.network.provider.send("hardhat_impersonateAccount", [
            user2Address,
        ]);
        user2 = await hre.ethers.getSigner(user2Address);

        // await hre.ethers.provider.send("hardhat_setBalance", [
        //     admin1.address,
        //     "0x8ac7230489e80000",
        // ]);
        
        await hre.ethers.provider.send("hardhat_setBalance", [
            contractAdmin.address,
            "0x8ac7230489e80000",
        ]);
        await hre.ethers.provider.send("hardhat_setBalance", [
            permissionsAdmin.address,
            "0x8ac7230489e80000",
        ]);
        await hre.ethers.provider.send("hardhat_setBalance", [
            richTOS.address,
            "0x8ac7230489e80000",
        ]);
        await hre.ethers.provider.send("hardhat_setBalance", [
            user1.address,
            "0x8ac7230489e80000",
        ]);
        await hre.ethers.provider.send("hardhat_setBalance", [
            user2.address,
            "0x8ac7230489e80000",
        ]);
    })

    describe("Set Contract", () => {
        it("Set LockTOSProxy", async () => {
            LockTOSProxy = new ethers.Contract(
                LockTOSProxyAddr,
                lockTOSPRoxyABI,
                contractAdmin
            )
        })

        it("Set BondDepositoryProxy", async () => {
            BondDepositoryProxy = new ethers.Contract(
                BondDepositoryProxyAddr,
                BondDepositoryProxyABI,
                contractAdmin
            )
        })

        it("Set StakingV2Proxy", async () => {
            StakingV2Proxy = new ethers.Contract(
                StakingV2ProxyAddr,
                StakingV2ProxyABI,
                contractAdmin
            )
        })

        it("Set TreasuryProxy", async () => {
            TreasuryProxy = new ethers.Contract(
                TreasuryProxyAddr,
                TreasuryProxyABI,
                contractAdmin
            )
        })

        it("Set TreasuryProxy2", async () => {
            TreasuryProxy2 = new ethers.Contract(
                TreasuryProxyAddr2,
                TreasuryProxyABI,
                contractAdmin
            )
        })

        it("Set TOS", async () => {
            TOS = new ethers.Contract(
                TOSAddr,
                TOSABI,
                contractAdmin
            )
        })

        it("Set BondDepositoryLogic", async () => {
            BondDepositoryLogic = new ethers.Contract(
                BondDepositoryProxyAddr,
                BondDepositoryLogicABI,
                contractAdmin
            )
        })

        it("Set TreasuryLogicV1", async () => {
            TreasuryLogicV1 = new ethers.Contract(
                TreasuryProxyAddr,
                TreasuryLogicV1ABI,
                contractAdmin
            )
        })
    })

    describe("Deploy & Setting Contract", () => {
        it("Deploy the LibStaking", async () => {
            const libStakingDep = await ethers.getContractFactory("LibStaking");
            libStaking = await libStakingDep.deploy();

            await libStaking.deployed();
        })
        it("Deploy the StakingV2", async () => {
            const StakingV2Logic2Dep = await ethers.getContractFactory("StakingV2", {
                libraries: {
                    LibStaking: libStaking.address,
                },
            });
            StakingV2Logic2 = await StakingV2Logic2Dep.deploy();

            await StakingV2Logic2.deployed();
        })

        it("upgradeTo StakingV2", async () => {
            let checkImpleAddress = await StakingV2Proxy.proxyImplementation(0);
            expect(checkImpleAddress).to.not.equal(StakingV2Logic2.address)
            
            await StakingV2Proxy.connect(contractAdmin).upgradeTo(StakingV2Logic2.address);
            
            checkImpleAddress = await StakingV2Proxy.proxyImplementation(0);
            expect(checkImpleAddress).to.be.equal(StakingV2Logic2.address)
        })

        it("Set StakingV2Logic", async () => {
            StakingV2Logic = new ethers.Contract(
                StakingV2ProxyAddr,
                StakingV2LogicABI,
                contractAdmin
            )
        })
    })

    describe("remove the authority", () => {
        it("LockTOSProxy removeAdmin", async () => {
            let check = await LockTOSProxy.isAdmin(contractAdmin.address)
            expect(check).to.be.equal(true)
            await LockTOSProxy.connect(contractAdmin).removeAdmin(contractAdmin.address)
            check = await LockTOSProxy.isAdmin(contractAdmin.address)
            expect(check).to.be.equal(false)
        })

        it("BondDepositoryProxy removePolicy, removeAdmin, removeProxyAdmin", async () => {
            let check = await BondDepositoryProxy.isPolicy(contractAdmin.address)
            expect(check).to.be.equal(true)
            await BondDepositoryProxy.connect(contractAdmin).removePolicy()
            check = await BondDepositoryProxy.isPolicy(contractAdmin.address)
            expect(check).to.be.equal(false)
            
            check = await BondDepositoryProxy.isAdmin(contractAdmin.address)
            expect(check).to.be.equal(true)
            await BondDepositoryProxy.connect(contractAdmin).removeAdmin()
            check = await BondDepositoryProxy.isAdmin(contractAdmin.address)
            expect(check).to.be.equal(false)

            check = await BondDepositoryProxy.isProxyAdmin(contractAdmin.address)
            expect(check).to.be.equal(true)
            await BondDepositoryProxy.connect(contractAdmin).removeProxyAdmin()
            check = await BondDepositoryProxy.isProxyAdmin(contractAdmin.address)
            expect(check).to.be.equal(false)
        })

        it("StakingV2Proxy removePolicy, removeAdmin, removeProxyAdmin", async () => {
            let check = await StakingV2Proxy.isPolicy(contractAdmin.address)
            expect(check).to.be.equal(true)
            await StakingV2Proxy.connect(contractAdmin).removePolicy()
            check = await StakingV2Proxy.isPolicy(contractAdmin.address)
            expect(check).to.be.equal(false)
            
            check = await StakingV2Proxy.isAdmin(contractAdmin.address)
            expect(check).to.be.equal(true)
            await StakingV2Proxy.connect(contractAdmin).removeAdmin()
            check = await StakingV2Proxy.isAdmin(contractAdmin.address)
            expect(check).to.be.equal(false)

            check = await StakingV2Proxy.isProxyAdmin(contractAdmin.address)
            expect(check).to.be.equal(true)
            await StakingV2Proxy.connect(contractAdmin).removeProxyAdmin()
            check = await StakingV2Proxy.isProxyAdmin(contractAdmin.address)
            expect(check).to.be.equal(false)
        })

        it("TreasuryProxy removePolicy, removeAdmin, removeProxyAdmin", async () => {
            let check = await TreasuryProxy.isPolicy(contractAdmin.address)
            expect(check).to.be.equal(true)
            await TreasuryProxy.connect(contractAdmin).removePolicy()
            check = await TreasuryProxy.isPolicy(contractAdmin.address)
            expect(check).to.be.equal(false)
            
            check = await TreasuryProxy.isAdmin(contractAdmin.address)
            expect(check).to.be.equal(true)
            await TreasuryProxy.connect(contractAdmin).removeAdmin()
            check = await TreasuryProxy.isAdmin(contractAdmin.address)
            expect(check).to.be.equal(false)

            check = await TreasuryProxy.isProxyAdmin(contractAdmin.address)
            expect(check).to.be.equal(true)
            await TreasuryProxy.connect(contractAdmin).removeProxyAdmin()
            check = await TreasuryProxy.isProxyAdmin(contractAdmin.address)
            expect(check).to.be.equal(false)
        })
    })

    describe("remove Permissions", () => {
        it("TOS removeBurner TreasuryProxy2", async () => {
            let check = await TOS.isBurner(TreasuryProxyAddr2)
            expect(check).to.be.equal(true)
            await TOS.connect(permissionsAdmin).removeBurner(TreasuryProxyAddr2)
            check = await TOS.isBurner(TreasuryProxyAddr2)
            expect(check).to.be.equal(false)
        })

        it("TOS removeMinter TreasuryProxy", async () => {
            let check = await TOS.isMinter(TreasuryProxyAddr)
            expect(check).to.be.equal(true)
            await TOS.connect(permissionsAdmin).removeMinter(TreasuryProxyAddr)
            check = await TOS.isMinter(TreasuryProxyAddr)
            expect(check).to.be.equal(false)
        })

        it("TOS removeMinter TreasuryProxy2", async () => {
            let check = await TOS.isMinter(TreasuryProxyAddr2)
            expect(check).to.be.equal(true)
            await TOS.connect(permissionsAdmin).removeMinter(TreasuryProxyAddr2)
            check = await TOS.isMinter(TreasuryProxyAddr2)
            expect(check).to.be.equal(false)
        })

        it("TOS removeAdmin", async () => {
            let check = await TOS.isAdmin(permissionsAdmin.address)
            expect(check).to.be.equal(true)
            await TOS.connect(permissionsAdmin).removeAdmin(permissionsAdmin.address)
            check = await TOS.isAdmin(permissionsAdmin.address)
            expect(check).to.be.equal(false)
        })


    })

    describe("functions Test", () => {
        it("Send TOS, user1, user", async () => {
            await TOS.connect(richTOS).transfer(user1Address,minimumAmount)
            await TOS.connect(richTOS).transfer(user2Address,minimumAmount)
        })
        
        it("check possibleIndex", async () => {
            let possibleIndex = await StakingV2Logic.possibleIndex()
            console.log("possibleIndex :", possibleIndex)
        })

        it('increase block time', async function () {
            const block = await ethers.provider.getBlock('latest')
            // console.log(block.timestamp);
            let epochTimeStamp = 1934460995
            let diffTime = Number(epochTimeStamp)-Number(block.timestamp);
            // console.log(diffTime)

            ethers.provider.send("evm_increaseTime", [diffTime+10])
            ethers.provider.send("evm_mine")
        });

        it("check possibleIndex", async () => {
            beforeEpochTime = await StakingV2Logic.possibleIndex()
            console.log("beforeEpochTime :", beforeEpochTime)
        })

        it('increase block time', async function () {
            const block = await ethers.provider.getBlock('latest')
            // console.log(block.timestamp);
            let diffTime = 3600 * 8
            // console.log(diffTime)

            ethers.provider.send("evm_increaseTime", [diffTime+10])
            ethers.provider.send("evm_mine")
        });

        it("check possibleIndex", async () => {
            afterEpochTime = await StakingV2Logic.possibleIndex()
            console.log("afterEpochTime :", afterEpochTime)
            expect(afterEpochTime).to.be.equal(beforeEpochTime)
        })


        it("stakeId Length", async () => {
            console.log(stakeId.length)
        })

        // it("stakeId Info", async () => {
        //     let stakeInfo = await StakingV2Logic.allStakings(stakeId[0])
        //     console.log(stakeInfo)
        //     let getTOSamount = await StakingV2Logic.getLtosToTos(stakeInfo.ltos)
        //     console.log(getTOSamount)
        //     console.log(stakeInfo.deposit)
        // })

        it("allStakeId forceUnstake", async () => {
            console.log("unstake Start");
            for(let i = 0; i < stakeId.length; i++) {
                // console.log("i : ", i);
                // console.log("stakeId[", i, "] : ", stakeId[i]);
                await StakingV2Logic.connect(user1).forceUnstake(stakeId[i]);
                // console.log("unstake Done");
            }
            console.log("AllStakeId unstake Done");
        })

        it("Stake & Unstake User can claim from TreasuryContract", async () => {
            let i = 0
            for (i ; i< uniqueAddr.length; i++) {
                let userAddress = uniqueAddr[i]
                await hre.network.provider.send("hardhat_impersonateAccount", [
                    userAddress,
                ]);
                await ethers.provider.send("hardhat_setBalance", [
                    userAddress,
                    "0x10000000000000000000000000",
                ]);
                let user = await hre.ethers.getSigner(userAddress);
                let claimAmountBefore  = await TOS.balanceOf(userAddress)
                await TreasuryLogicV1.connect(user).claim(claimAmountBefore)
                let claimAmountAfter  = await TOS.balanceOf(userAddress)
                console.log("UserAddr : ", userAddress)
                console.log("Claim Done")
                expect(claimAmountBefore).to.be.gt(claimAmountAfter)
            }
        })



    })


})